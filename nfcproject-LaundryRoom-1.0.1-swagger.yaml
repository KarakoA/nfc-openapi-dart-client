openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin

  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nfcproject/LaundryRoom/1.0.1
info:
  description: |
    An API for the washing machines and dryer in the Aristotelessteig Dormitory for our Project in the course NFC.
  version: "1.0.1"
  title: Aristotelessteig Laundry Room
  contact:
    email: anton.karakochev@outlook.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: machine
    description: Operations about laundry and washing machines
  - name: user
    description: Operations about accounts
paths:
  /user:
    post:
      tags: 
        - user
      summary: Adds a new user 
      operationId: addUsers
      description: Creates a new user. 
      responses:
        '201':
          description: User created
        '405':
          description: Invalid input
        '403':
          description: | 
            User with specified ID already exists
      requestBody:
        $ref: '#/components/requestBodies/User'
    get:
      tags: 
        - user
      summary: Lists all users
      operationId: listUsers
      description: Lists all registered users.
      responses:
        '200':
          description: registered users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_key: []
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
    delete:
      tags:
        - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
      description: Removes the user with matching ID.
  '/user/{userId}/recharge':
    post:
      tags:
        - user
      summary: Recharges the user's account
      description:  Adds balance to the user's account.
      operationId: userRecharge
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: uuid
        - name: amount
          in: query
          description: Amount to recharge
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: successful operation
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
  '/user/{userId}/deduct':
    post:
      tags:
        - user
      summary: Charges the user's account
      description:  Deducts the given amount from the user's account.
      operationId: userDeduct
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: uuid
        - name: amount
          in: query
          description: Amount to charge
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Successful operation
        '400':
          description: Not enough funds in account
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Error'
      security:
        - api_key: []
  '/user/{userId}/balance':
    get:
      tags:
        - user
      summary: Check the user's balance
      description:  Returns the balance of the given user.
      operationId: userBalance
      parameters:
        - name: userId
          in: path
          description: ID of user, whose balance to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: user's balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: integer
                    format: int32
                    description: The user's balance.
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
  /machine:
    post:
      tags: 
        - machine
      summary: Adds a new machine 
      operationId: addMachines
      description: Creates a new machine 
      responses:
        '201':
          description: Machine created
        '405':
          description: Invalid input
        '403':
          description: | 
            Machine with specified ID already exists
      requestBody:
        $ref: '#/components/requestBodies/Machine'
      security:
        - api_key: []
    get:
      tags: 
        - machine
      summary: Lists all machines
      operationId: listMachines
      description: Lists all machines.
      responses:
        '200':
          description: All machines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
  '/machine/available':
    get:
      tags: 
        - machine
      summary: Lists all available machines
      operationId: listAvailableMachines
      description: |
        Lists all available machines. This includes all, that are neither on hold, nor occupied.
      responses:
        '200':
          description: Available machines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
  '/machine/{machineId}':
    get:
      tags:
        - machine
      summary: Find machine by ID
      description: Returns a single machine.
      operationId: getMachineById
      parameters:
        - name: machineId
          in: path
          description: ID of machine to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
    delete:
      tags:
        - machine
      summary: Deletes a machine
      description: Removes the machine with matching ID.
      operationId: deleteMachine
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: machineId
          in: path
          description: Machine ID to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          $ref: '#/components/responses/InvalidId'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
  '/machine/{machineId}/hold':
    post:
      tags:
        - machine
      summary: Holds the machine
      description:  Holds the machine for the given user for 3 minutes.
      operationId: machineHold
      parameters:
        - name: machineId
          in: path
          description: ID of machine to hold
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          description: ID of the user, for who to hold the machine
          required: true
          schema:
            type: string
            format: uuid
        - name: timestamp
          in: query
          description: Time of sending the request
          required: true
          schema:
            type: string
            format: date-time 
      responses:
        '200':
          description: Successful operation
        '400':
          description: Machine already held by another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Machine or user ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
  '/machine/{machineId}/pay':
    post:
      tags:
        - machine
      summary: Pay for the given machine
      description:  |
        Pays for the given machine. In order to be able to pay for a machine, the user must be holding the machine in question.
      operationId: machinePay
      parameters:
        - name: machineId
          in: path
          description: ID of the machine to pay
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
        '400':
          description: machine not held by user or not enough funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Machine or user ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        cardId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        balance:
          type: number
          format: double
          example: 4.50
        pinCode:
          type: integer
          format: int32
          example: 123123
      description: A user of the system.
    Machine:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        name:
          type: integer
          format: int32
          example: 5
          description: The name of the machine (number written on it's front side)
        houseNumber:
          type: integer
          format: int32
          example: 2
          description: The house, in which the machine is located
        cost: 
          type: number
          format: double
          example: 2.80
          description: The cost of one usage of the machine
        type:
          type: string
          enum: [Dryer, WashingMachine]
          description: The type of the machine
        programDurationInMinutes:
          type: integer
          format: int32
          example: 60
          description: The average duration of a program of the machine
        lastStartTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          description: The last time, thatthe machine was started
        lastHoldingStartTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          description: The last time, that someone held this machine
        lastHoldingUserId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: The last user, that held this machine
      required:
        - id
        - cost
        - type
        - programDurationInMinutes
      description: A landry machine (either washing machine or dryer).
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
          example: 404
        reason:
          type: string
          example: Not found
      required:
        - code
        - reason
      description: An error response, returned by this API.
  requestBodies:
    Machine:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Machine'
      description: Machine object that needs to be added
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User object, that needs to be added.
      required: true
  responses:
    InvalidId:
      description: The specified ID is not valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header